version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.9  # Change to your preferred runtime (nodejs: 18, python: 3.11, etc.)
    commands:
      - echo Entered the install phase...
      - echo Installing dependencies...
      # For Python
      - pip install -r requirements.txt
      # For Node.js, uncomment the following:
      # - npm install
      
  pre_build:
    commands:
      - echo Entered the pre_build phase...
      - echo Running tests...
      # For Python
      - python -m pytest tests/ || echo "No tests found"
      
  build:
    commands:
      - echo Entered the build phase...
      - echo Build started on `date`
      - echo Creating deployment package...
      
      # Create a deployment package
      - mkdir -p build
      
      # For Python - copy source files and dependencies
      - cp -r src/* build/ || cp *.py build/
      - pip install -r requirements.txt -t build/
      
      # For Node.js, uncomment and modify the following:
      # - cp -r src/* build/ || cp *.js build/
      # - cp package.json build/
      # - cd build && npm install --production && cd ..
      
      # Create ZIP file for Lambda deployment
      - cd build && zip -r ../lambda-function.zip . && cd ..
      
  post_build:
    commands:
      - echo Entered the post_build phase...
      - echo Build completed on `date`
      - ls -la lambda-function.zip
      
      # Update the Lambda function first to get the new version
      - echo Updating Lambda function...
      - aws lambda update-function-code --function-name codeDeployDemo --zip-file fileb://lambda-function.zip
      
      # Wait for the update to complete
      - echo Waiting for function update to complete...
      - aws lambda wait function-updated --function-name codeDeployDemo
      
      # Get the latest version number
      - echo Getting latest version...
      - CURRENT=$(aws lambda get-alias --function-name codeDeployDemo --name prod --query 'FunctionVersion' --output text)
      - TARGET=$(aws lambda publish-version --function-name codeDeployDemo --query 'Version' --output text)
      
      # Replace the placeholder in appspec.yml
      - sed -i "s/CURRENT_VERSION/$CURRENT/" appspec.yml
      - sed -i "s/TARGET_VERSION/$TARGET/" appspec.yml
      
      # Verify the replacement worked
      - echo "Updated appspec.yml content:"
      - cat appspec.yml

artifacts:
  files:
    - lambda-function.zip
    - appspec.yml
  name: lambda-deployment-package
cache:
  paths:
    # For Python
    - '/root/.cache/pip/**/*'
    # For Node.js, uncomment the following:
    # - 'node_modules/**/*'
